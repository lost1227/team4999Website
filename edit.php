<?php session_start(); ?>
<html>
<head>
	<title>Edit Team</title>
	<link rel="stylesheet" href="styles/edit.css">
	<!--favicon generated by http://realfavicongenerator.net/-->
	<link rel="apple-touch-icon" sizes="180x180" href="/favicons/apple-touch-icon.png">
	<link rel="icon" type="image/png" href="/favicons/favicon-32x32.png" sizes="32x32">
	<link rel="icon" type="image/png" href="/favicons/android-chrome-192x192.png" sizes="192x192">
	<link rel="icon" type="image/png" href="/favicons/favicon-16x16.png" sizes="16x16">
	<link rel="manifest" href="/favicons/manifest.json">
	<link rel="mask-icon" href="/favicons/safari-pinned-tab.svg" color="#5bbad5">
	<link rel="shortcut icon" href="/favicons/favicon.ico">
	<meta name="apple-mobile-web-app-title" content="Scouting">
	<meta name="application-name" content="Scouting">
	<meta name="msapplication-config" content="/favicons/browserconfig.xml">
	<meta name="theme-color" content="#ffffff">
	<script>
		function setUrl(url) {
			document.location.href = url;
		}
	</script>
</head>
<body>
<div id="main">
<?php
require 'functions.php';
$acceptableFileTypes = array("jpg","png","jpeg","gif","bmp");
function image_fix_orientation(&$image, $filename) {
    $exif = @exif_read_data($filename); # @ symbol is to supress warnings that occur with files with no exif data

    if (!empty($exif['Orientation'])) {
        switch ($exif['Orientation']) {
            case 3:
                $image = imagerotate($image, 180, 0);
                break;

            case 6:
                $image = imagerotate($image, -90, 0);
                break;

            case 8:
                $image = imagerotate($image, 90, 0);
                break;
        }
    }
}

function getAccordion($title,$content) {
	return '<div class="accordion">
		<button class="accordionbutton">'.$title.'</button>
		<button class="deletebutton">-</button>
		<div class="accordioncontent">'.$content.'</div>
		</div>';
}

function getPhotoDiv($id) {
	global $appdir, $image_root,$acceptableFileTypes;
	$out = '<div id="photogallery">';
	$image_dir = $image_root . $id.'/thumb/';
	if(file_exists($image_dir)) {
		$files = scandir($image_dir);
		foreach($files as $file) {

			if(in_array(pathinfo(basename($file),PATHINFO_EXTENSION),$acceptableFileTypes)) {
				// POST will recieve the id to remove and the name of the thumbnail.
				$out .= '<label>
									<input class="deletePix" type="checkbox" name="delimgs['.clean($id).'][]" value="'.clean($file).'">
									<img src="'.$image_dir.$file.'" class="gallery">
								</label>';
			}
		}
	}
	$out .= '<input id="uploadImage" type="file" name="uploadImages['.clean($id).'][]" accept="image/jpeg,image/png,image/gif,image/bmp" multiple>';
	$out .= '</div>';
	return $out;
}

function checkExists($dir) {
	if(!file_exists($dir)) {
		mkdir($dir,0777,true);
	}
}

/**
 * Get data associated with the ids and format it into an html string to be shown
 * @param $ids The ids to Query
 * @param $datatable Which table to query, $RobotDataTable or $EventDataTable
 * @param $dataschema The schema of the data to show
*/
function getAndFormatData($ids, $datatable, $dataschema) {
	global $RobotDataTable, $EventDataTable;

	if($datatable == $RobotDataTable) {
		$prefix = "robot";
	} elseif ($datatable == $EventDataTable){
		$prefix = "event";
	} else {
		return false;
	}

	$out = "";
	# Loop through the robots
	foreach($ids as $index=>$id) {
		# Get data for each robot
		$data = retrieveKeys($datatable, $id, $dataschema);

		# Figure out a title for the accordioncontent
		if($datatable == $RobotDataTable) {
			if(isset($data["name"]["data_value"]) && !empty($data["name"]["data_value"])) {
				$title = $data["name"]["data_value"];
			} else {
				$title = "Robot #" . ($index + 1);
			}
		} elseif ($datatable == $EventDataTable) {
			// event_name and match_num are special
			if(isset($data["event_name"]["data_value"]) && isset($data["match_num"]["data_value"]) &&!empty($data["event_name"]["data_value"]) && !empty($data["match_num"]["data_value"])) {
				$title = $data["event_name"]["data_value"]." Match #".$data["match_num"]["data_value"];
			} else {
				$title = "Match #" . ($index + 1);
			}
		} else {
			$title = $index + 1;
		}


		# Populate the accordion with the data retrieved
		$content = "";
		foreach($data as $key=>$value) {
			if(!isset($value["data_value"])) {
				$value["data_value"] = "";
			}
			$content .= '<div class="keypair">';
			switch($value["type"]) {
				case "string":
					$content .= '<p class="key">'.$value["display_name"].': </p><input type="text" name="'.$prefix.'['.$id.']['.$key.']" value="'.$value["data_value"].'">';
					break;
				case "select":
					$content .= '<p class="key">'.$value["display_name"].': </p><select name="'.$prefix.'['.$id.']['.$key.']">';
					foreach($value["values"] as $option) {
						if($option == $value["data_value"]) {
							$content .= '<option value="'.$option.'" selected="selected">'.$option.'</option>';
						} else {
							$content .= '<option value="'.$option.'">'.$option.'</option>';
						}
					}
					$content .= '</select>';
					break;
				case "boolean": // store booleans as strings in the DB, where "true" is true
					if($value["data_value"] == "true") {
						$content .= '<label><p class="key">'.$value["display_name"].': </p><input type="checkbox" name="'.$prefix.'['.$id.']['.$key.']" class="optionboolean" checked></label>';
					} else {
						$content .= '<label><p class="key">'.$value["display_name"].': </p><input type="checkbox" name="'.$prefix.'['.$id.']['.$key.']" class="optionboolean"></label>';
					}
					break;
				case "number":
					$content .= '<p class="key">'.$value["display_name"].': </p><input type="number" name="'.$prefix.'['.$id.']['.$key.']" value="'.$value["data_value"].'">';
					break;
				case "textarea":
					$content .= '<p class="key">'.$value["display_name"].': </p><textarea name="'.$prefix.'['.$id.']['.$key.']">'.$value["data_value"].'</textarea>';
					break;
			}
			$content .= '</div>';
		}
		$content .= getPhotoDiv($id);
		$out .= getAccordion($title, $content);
	}
	return $out;
}

function getRowConstructor($functionname, $prefix, $dataschema) {
	$out = "function ".$functionname."(id){";
	$out .= "return `";

	# Populate the accordion with the data
	$content = "";
	foreach($dataschema as $key=>$value) {
		$content .= '<div class="keypair">';
		switch($value["type"]) {
			case "string":
				$content .= '<p class="key">'.$value["display_name"].': </p><input type="text" name="'.$prefix.'[${id}]['.$key.']">';
				break;
			case "select":
				$content .= '<p class="key">'.$value["display_name"].': </p><select name="'.$prefix.'[${id}]['.$key.']">';
				foreach($value["values"] as $option) {
					$content .= '<option value="'.$option.'">'.$option.'</option>';
				}
				$content .= '</select>';
				break;
			case "boolean": // store booleans as strings in the DB, where "true" is true
				$content .= '<label><p class="key">'.$value["display_name"].': </p><input type="checkbox" name="'.$prefix.'[${id}]['.$key.']" class="optionboolean"></label>';
				break;
			case "number":
				$content .= '<p class="key">'.$value["display_name"].': </p><input type="number" name="'.$prefix.'[${id}]['.$key.']">';
				break;
			case "textarea":
				$content .= '<p class="key">'.$value["display_name"].': </p><textarea name="'.$prefix.'[${id}]['.$key.']"></textarea>';
				break;
		}
		$content .= '</div>';
	}
	$content .= '<div id="photogallery">';
	$content .= '<input id="uploadImage" type="file" name="uploadImages[${id}][]" accept="image/jpeg,image/png,image/gif,image/bmp" multiple>';
	$out .= getAccordion("", $content);
	$out .= '</div>';
	$out .= "`; }";
	return $out;
}


#check if logged in and redirect if not
if (isset($_SESSION["loggedIn"])){
	$DB = createDBObject();
} else {
	if(isset($_GET["team"])){
		header( 'Location: '.getRootDir().'login.php?redirect=edit.php?team='.$_GET["team"]);
	} else {
		header( 'Location: '.getRootDir().'login.php?redirect=edit.php');
	}
	exit();
}
if($_SERVER["REQUEST_METHOD"] == "GET") {
	if(!isset($_GET["team"])) {
		header( 'Location: '.getRootDir().'index.php');
	} else {
		$team = clean($_GET["team"]);
	}
}
if($_SERVER["REQUEST_METHOD"] == "POST") {
	if(!isset($_POST["team"])) {
		header( 'Location: '.getRootDir().'index.php');
	} else {
		$team = clean($_POST["team"]);
	}
}
if(!checkTeamInDB($team)) {
	header('Location: '.getRootDir().'addTeam.php?team='.$team);
}
?>
<img src="images/back.png" id="back" onclick="setUrl('<?php require 'specificvars.php'; echo($appdir.'info.php?team='.clean($team)); ?>')">
<h1>Edit Team <?php echo(clean($team))?></h1>
<form action="<?php echo(htmlentities($_SERVER['PHP_SELF'])); ?>" method="post" id="mainf" enctype="multipart/form-data">

<?php

	if(file_exists("schema.json")) {
		$json = json_decode(file_get_contents("schema.json"), True);
		$year = getYearData($json, getDefaultYear())[1];
		if($year === false) {
			echo("<p>Schema for this year does not exist</p>");
			exit();
		}
	} else {
		echo("<p>schema.json does not exist!</p>");
		exit();
	}

	$data = getTeamIds($team);
	if($data === false) {
		$robotids = array();
		$eventids = array();
	} else {
		$robotids = $data["robotids"];
		$eventids = $data["eventids"];
	}

	$robotids = getIdsForYear($RobotDataTable, $year["year"], $robotids);
	$eventids = getIdsForYear($EventDataTable, $year["year"], $eventids);


# PROCESS FORM DATA
if($_SERVER["REQUEST_METHOD"] == "POST") {
	
	if(!checkCSRFToken($_POST["token"])) {
		die("Bad CSRF Token");
	}

	if(isset($_POST["robot"])) {
		$robotdata = $_POST["robot"];
	} else {
		$robotdata = array();
	}
	$robotschema = $year["robotdata"];

	foreach($robotids as $robotid) {
		if(!isset($robotdata[$robotid])) {
			deleteItem($RobotDataTable, $robotid);
			if (file_exists($image_root . $robotid)) {
				rrmdir($image_root . $robotid);
			}
		}
	}

	foreach($robotdata as $robotid=>$robot){
		if(!in_array($robotid, $robotids)) {
			addIdToTeam($team, "robotid", $robotid);
			$changedKeyValues = array("year"=>$year["year"]);
		} else {
			$changedKeyValues = array();
		}

		foreach($robot as $robotkey=>$robotdata) {
			if(isset($robotschema[$robotkey])) {
				$changedKeyValues[$robotkey] = clean($robotdata);
			}
		}
		updateDBKeys($RobotDataTable, clean($robotid), $changedKeyValues);
	}

	if(isset($_POST["event"])){
		$eventdata = $_POST["event"];
	} else {
		$eventdata = array();
	}
	$eventschema = $year["matchdata"];

	foreach($eventids as $eventid) {
		if(!isset($eventdata[$eventid])) {
			deleteItem($EventDataTable, $eventid);
			if (file_exists($image_root . $eventid)) {
				rrmdir($image_root . $eventid);
			}
		}
	}

	foreach($eventdata as $eventid=>$event){

		if(!in_array($eventid, $eventids)) {
			addIdToTeam($team, "eventid", $eventid);
			$changedKeyValues = array("year"=>$year["year"]);
		} else {
			$changedKeyValues = array();
		}

		foreach($event as $eventkey=>$eventdata) {
			if(isset($eventschema[$eventkey])) {
				$changedKeyValues[$eventkey] = clean($eventdata);
			}
		}
		updateDBKeys($EventDataTable, clean($eventid), $changedKeyValues);
	}


	foreach($_FILES["uploadImages"]["tmp_name"] as $id=>$files) {
		foreach($files as $idx=>$file) {
			if(file_exists($file) && $_FILES["uploadImages"]["error"][$id][$idx] == UPLOAD_ERR_OK && is_uploaded_file($file)){
				checkExists($image_root);
				$image_dir = $image_root .$id.'/full/';
				$thumb_dir = $image_root . $id.'/thumb/';
				checkExists($image_dir);
				checkExists($thumb_dir);

				$filename = getUniqueFilename($image_dir);
				$extension = strtolower(pathinfo(basename($_FILES["uploadImages"]["name"][$id][$idx]),PATHINFO_EXTENSION));
				$targetfilepath = $image_dir . $filename . ".jpg";
				$targetthumbpath = $thumb_dir . $filename . ".jpg";

				writeToLog("Saving " . $_FILES["uploadImages"]["name"][$id][$idx] ." to " . $targetfilepath, "images");

				$imgsize = getimagesize($file);
				if($imgsize === False || !in_array($extension,$acceptableFileTypes)) {
					writeToLog($_FILES["uploadImages"]["name"][$id][$idx] . " is not a valid image", "images");
					continue;
				}

				switch(strtolower($imgsize['mime'])) {
					case 'img/bmp':
						$img = imagecreatefrombmp($file);
						break;
					case 'image/png':
						$img = imagecreatefrompng($file);
						break;
					case 'image/jpeg':
						$img = imagecreatefromjpeg($file);
						break;
					case 'image/gif':
						$img = imagecreatefromgif($file);
						break;
					default:
						writeToLog($_FILES["uploadImages"]["name"][$id][$idx] . " is not a valid image", "images");
						continue;
				}
				image_fix_orientation($img,$file);
				if(!imagejpeg($img,$targetfilepath)){
					writeToLog("Failed to save file ".$_FILES["uploadImages"]["name"][$id][$idx],"images");
				}
				if(!imagejpeg(imagescale($img,$thumbnail_width),$targetthumbpath)){
					writeToLog("Failed to save thumbnail for ".$_FILES["uploadImages"]["name"][$id][$idx],"images");
				}
			}
		}
	}
	if(isset($_POST["delimgs"])) {
		foreach($_POST["delimgs"] as $id=>$pics) {
			foreach($pics as $pic) {
				$image_dir = $image_root .$id.'/full/'.$pic;
				$thumb_dir = $image_root . $id.'/thumb/'.$pic;
				unlink($image_dir);
				unlink($thumb_dir);
			}
		}
	}


}

$data = getTeamIds($team);
if($data === false) {
	$robotids = array();
	$eventids = array();
} else {
	$robotids = $data["robotids"];
	$eventids = $data["eventids"];
}
$robotids = getIdsForYear($RobotDataTable, $year["year"], $robotids);
$eventids = getIdsForYear($EventDataTable, $year["year"], $eventids);
?>
<p class="category">Robots:</p>
<div id="robotaccordion">
	<?php
		if(count($robotids) > 0) {
			echo(getAndFormatData($robotids, $RobotDataTable, $year["robotdata"]));
		}
	?>
	<button class="add" id="addRobot">+</button>
</div>

<p class="category">Matches:</p>
<div id="matchaccordion">
	<?php
		if(count($eventids) > 0) {
			echo(getAndFormatData($eventids, $EventDataTable, $year["matchdata"]));
		}
	?>
	<button class="add" id="addMatch">+</button>
</div>

<?php
echo('<input type="hidden" name="team" value="'.$team.'">');
?>
<input type="hidden" name="token" value="<?php echo(getCSRFToken()); ?>">
<input type="submit" value="Save">
</form>
</div>
<script>
<?php
	echo(getRowConstructor("getRobotRow","robot",$year["robotdata"]));
	echo(getRowConstructor("getMatchRow","event",$year["matchdata"]));
?>
</script>
<script src="scripts/jquery-3.1.1.min.js"></script>
<script src="scripts/edit.js"></script>
</body>
</html>
